// tslint:disable:no-construct number-literal-format
import * as main from '../src/main'

jest.resetModules()

describe('string', () => {
  test('useful', () => {
    expect(main.isUsefulString('123')).toBe(true)
    expect(main.isUsefulString('asdf')).toBe(true)
    expect(main.isUsefulString('asdf qwer')).toBe(true)
    expect(main.isUsefulString('测试——中文')).toBe(true)
    expect(main.isUsefulString('')).toBe(false)
    expect(main.isUsefulString(new String('asdf'))).toBe(false)
    expect(main.isUsefulString(123)).toBe(false)
    expect(main.isUsefulString(NaN)).toBe(false)
    expect(main.isUsefulString(Infinity)).toBe(false)
    expect(main.isUsefulString(null)).toBe(false)
    expect(main.isUsefulString(undefined)).toBe(false)
    expect(main.isUsefulString(true)).toBe(false)
    expect(main.isUsefulString(false)).toBe(false)
    expect(main.isUsefulString((): void => undefined)).toBe(false)
    expect(main.isUsefulString(/asdf/)).toBe(false)
  })

  test('useless', () => {
    expect(main.isUselessString('123')).not.toBe(true)
    expect(main.isUselessString('asdf')).not.toBe(true)
    expect(main.isUselessString('asdf qwer')).not.toBe(true)
    expect(main.isUselessString('测试——中文')).not.toBe(true)
    expect(main.isUselessString('')).not.toBe(false)
    expect(main.isUselessString(new String('asdf'))).not.toBe(false)
    expect(main.isUselessString(123)).not.toBe(false)
    expect(main.isUselessString(NaN)).not.toBe(false)
    expect(main.isUselessString(Infinity)).not.toBe(false)
    expect(main.isUselessString(null)).not.toBe(false)
    expect(main.isUselessString(undefined)).not.toBe(false)
    expect(main.isUselessString(true)).not.toBe(false)
    expect(main.isUselessString(false)).not.toBe(false)
    expect(main.isUselessString((): void => undefined)).not.toBe(false)
    expect(main.isUselessString(/asdf/)).not.toBe(false)
  })
})

describe('number', () => {
  test('useful', () => {
    expect(main.isUsefulNumber(123)).toBe(true)
    expect(main.isUsefulNumber(0.123)).toBe(true)
    expect(main.isUsefulNumber(0)).toBe(true)
    expect(main.isUsefulNumber('123')).toBe(false)
    expect(main.isUsefulNumber('123.0')).toBe(false)
    expect(main.isUsefulNumber(new Number(123))).toBe(false)
    expect(main.isUsefulNumber(Infinity)).toBe(false)
    expect(main.isUsefulNumber(-Infinity)).toBe(false)
    expect(main.isUsefulNumber(NaN)).toBe(false)
    expect(main.isUsefulNumber(null)).toBe(false)
    expect(main.isUsefulNumber(undefined)).toBe(false)
    expect(main.isUsefulNumber(true)).toBe(false)
    expect(main.isUsefulNumber(false)).toBe(false)
    expect(main.isUsefulNumber((): void => undefined)).toBe(false)
    expect(main.isUsefulNumber(/asdf/)).toBe(false)
  })

  test('useless', () => {
    expect(main.isUselessNumber(123)).not.toBe(true)
    expect(main.isUselessNumber(0.123)).not.toBe(true)
    expect(main.isUselessNumber(0)).not.toBe(true)
    expect(main.isUselessNumber('123')).not.toBe(false)
    expect(main.isUselessNumber('123.0')).not.toBe(false)
    expect(main.isUselessNumber(new Number(123))).not.toBe(false)
    expect(main.isUselessNumber(Infinity)).not.toBe(false)
    expect(main.isUselessNumber(-Infinity)).not.toBe(false)
    expect(main.isUselessNumber(NaN)).not.toBe(false)
    expect(main.isUselessNumber(null)).not.toBe(false)
    expect(main.isUselessNumber(undefined)).not.toBe(false)
    expect(main.isUselessNumber(true)).not.toBe(false)
    expect(main.isUselessNumber(false)).not.toBe(false)
    expect(main.isUselessNumber((): void => undefined)).not.toBe(false)
    expect(main.isUselessNumber(/asdf/)).not.toBe(false)
  })

})

describe('int', () => {
  describe('w/ `Number.isSafeInteger()` support', () => {
    test('useful', () => {
      expect(main.isUsefulInt(123)).toBe(true)
      expect(main.isUsefulInt(123.0)).toBe(true)
      expect(main.isUsefulInt(0.123)).toBe(false)
      expect(main.isUsefulInt(0)).toBe(true)
      expect(main.isUsefulInt(Math.pow(2, 53) - 1)).toBe(true)
      expect(main.isUsefulInt(Math.pow(2, 53))).toBe(false)
      expect(main.isUsefulInt(-Math.pow(2, 53) + 1)).toBe(true)
      expect(main.isUsefulInt(-Math.pow(2, 53))).toBe(false)
      expect(main.isUsefulInt('123')).toBe(false)
      expect(main.isUsefulInt('123.0')).toBe(false)
      expect(main.isUsefulInt(new Number(123))).toBe(false)
      expect(main.isUsefulInt(Infinity)).toBe(false)
      expect(main.isUsefulInt(-Infinity)).toBe(false)
      expect(main.isUsefulInt(NaN)).toBe(false)
      expect(main.isUsefulInt(null)).toBe(false)
      expect(main.isUsefulInt(undefined)).toBe(false)
      expect(main.isUsefulInt(true)).toBe(false)
      expect(main.isUsefulInt(false)).toBe(false)
      expect(main.isUsefulInt((): void => undefined)).toBe(false)
      expect(main.isUsefulInt(/asdf/)).toBe(false)
    })

    test('useless', () => {
      expect(main.isUselessInt(123)).not.toBe(true)
      expect(main.isUselessInt(123.0)).not.toBe(true)
      expect(main.isUselessInt(0.123)).not.toBe(false)
      expect(main.isUselessInt(0)).not.toBe(true)
      expect(main.isUselessInt(Math.pow(2, 53) - 1)).not.toBe(true)
      expect(main.isUselessInt(Math.pow(2, 53))).not.toBe(false)
      expect(main.isUselessInt(-Math.pow(2, 53) + 1)).not.toBe(true)
      expect(main.isUselessInt(-Math.pow(2, 53))).not.toBe(false)
      expect(main.isUselessInt('123')).not.toBe(false)
      expect(main.isUselessInt('123.0')).not.toBe(false)
      expect(main.isUselessInt(new Number(123))).not.toBe(false)
      expect(main.isUselessInt(Infinity)).not.toBe(false)
      expect(main.isUselessInt(-Infinity)).not.toBe(false)
      expect(main.isUselessInt(NaN)).not.toBe(false)
      expect(main.isUselessInt(null)).not.toBe(false)
      expect(main.isUselessInt(undefined)).not.toBe(false)
      expect(main.isUselessInt(true)).not.toBe(false)
      expect(main.isUselessInt(false)).not.toBe(false)
      expect(main.isUselessInt((): void => undefined)).not.toBe(false)
      expect(main.isUselessInt(/asdf/)).not.toBe(false)
    })
  })

  describe('w/o `Number.isSafeInteger()` support', () => {
    const backup = Number.isSafeInteger
    beforeEach(() => {
      delete Number.isSafeInteger
    })
    afterEach(() => {
      Number.isSafeInteger = backup
    })
    test('useful', () => {
      expect(main.isUsefulInt(123)).toBe(true)
      expect(main.isUsefulInt(123.0)).toBe(true)
      expect(main.isUsefulInt(0.123)).toBe(false)
      expect(main.isUsefulInt(0)).toBe(true)
      expect(main.isUsefulInt(Math.pow(2, 53) - 1)).toBe(true)
      expect(main.isUsefulInt(Math.pow(2, 53))).toBe(false)
      expect(main.isUsefulInt(-Math.pow(2, 53) + 1)).toBe(true)
      expect(main.isUsefulInt(-Math.pow(2, 53))).toBe(false)
      expect(main.isUsefulInt('123')).toBe(false)
      expect(main.isUsefulInt('123.0')).toBe(false)
      expect(main.isUsefulInt(new Number(123))).toBe(false)
      expect(main.isUsefulInt(Infinity)).toBe(false)
      expect(main.isUsefulInt(-Infinity)).toBe(false)
      expect(main.isUsefulInt(NaN)).toBe(false)
      expect(main.isUsefulInt(null)).toBe(false)
      expect(main.isUsefulInt(undefined)).toBe(false)
      expect(main.isUsefulInt(true)).toBe(false)
      expect(main.isUsefulInt(false)).toBe(false)
      expect(main.isUsefulInt((): void => undefined)).toBe(false)
      expect(main.isUsefulInt(/asdf/)).toBe(false)
    })

    test('useless', () => {
      expect(main.isUselessInt(123)).not.toBe(true)
      expect(main.isUselessInt(123.0)).not.toBe(true)
      expect(main.isUselessInt(0.123)).not.toBe(false)
      expect(main.isUselessInt(0)).not.toBe(true)
      expect(main.isUselessInt(Math.pow(2, 53) - 1)).not.toBe(true)
      expect(main.isUselessInt(Math.pow(2, 53))).not.toBe(false)
      expect(main.isUselessInt(-Math.pow(2, 53) + 1)).not.toBe(true)
      expect(main.isUselessInt(-Math.pow(2, 53))).not.toBe(false)
      expect(main.isUselessInt('123')).not.toBe(false)
      expect(main.isUselessInt('123.0')).not.toBe(false)
      expect(main.isUselessInt(new Number(123))).not.toBe(false)
      expect(main.isUselessInt(Infinity)).not.toBe(false)
      expect(main.isUselessInt(-Infinity)).not.toBe(false)
      expect(main.isUselessInt(NaN)).not.toBe(false)
      expect(main.isUselessInt(null)).not.toBe(false)
      expect(main.isUselessInt(undefined)).not.toBe(false)
      expect(main.isUselessInt(true)).not.toBe(false)
      expect(main.isUselessInt(false)).not.toBe(false)
      expect(main.isUselessInt((): void => undefined)).not.toBe(false)
      expect(main.isUselessInt(/asdf/)).not.toBe(false)
    })
  })
})

describe('number-string', () => {
  test('useful', () => {
    expect(main.isUsefulNumberString(123)).toBe(false)
    expect(main.isUsefulNumberString(123.0)).toBe(false)
    expect(main.isUsefulNumberString(0.123)).toBe(false)
    expect(main.isUsefulNumberString(0)).toBe(false)
    expect(main.isUsefulNumberString('123')).toBe(true)
    expect(main.isUsefulNumberString('123.0')).toBe(true)
    expect(main.isUsefulNumberString('')).toBe(false)
    expect(main.isUsefulNumberString(new Number(123))).toBe(false)
    expect(main.isUsefulNumberString(Infinity)).toBe(false)
    expect(main.isUsefulNumberString(-Infinity)).toBe(false)
    expect(main.isUsefulNumberString(NaN)).toBe(false)
    expect(main.isUsefulNumberString(null)).toBe(false)
    expect(main.isUsefulNumberString(undefined)).toBe(false)
    expect(main.isUsefulNumberString(true)).toBe(false)
    expect(main.isUsefulNumberString(false)).toBe(false)
    expect(main.isUsefulNumberString((): void => undefined)).toBe(false)
    expect(main.isUsefulNumberString(/asdf/)).toBe(false)
  })

  test('useless', () => {
    expect(main.isUselessNumberString(123)).not.toBe(false)
    expect(main.isUselessNumberString(123.0)).not.toBe(false)
    expect(main.isUselessNumberString(0.123)).not.toBe(false)
    expect(main.isUselessNumberString(0)).not.toBe(false)
    expect(main.isUselessNumberString('123')).not.toBe(true)
    expect(main.isUselessNumberString('123.0')).not.toBe(true)
    expect(main.isUselessNumberString('')).not.toBe(false)
    expect(main.isUselessNumberString(new Number(123))).not.toBe(false)
    expect(main.isUselessNumberString(Infinity)).not.toBe(false)
    expect(main.isUselessNumberString(-Infinity)).not.toBe(false)
    expect(main.isUselessNumberString(NaN)).not.toBe(false)
    expect(main.isUselessNumberString(null)).not.toBe(false)
    expect(main.isUselessNumberString(undefined)).not.toBe(false)
    expect(main.isUselessNumberString(true)).not.toBe(false)
    expect(main.isUselessNumberString(false)).not.toBe(false)
    expect(main.isUselessNumberString((): void => undefined)).not.toBe(false)
    expect(main.isUselessNumberString(/asdf/)).not.toBe(false)
  })
})

describe('int-string', () => {
  test('useful', () => {
    expect(main.isUsefulIntString(123)).toBe(false)
    expect(main.isUsefulIntString(123.0)).toBe(false)
    expect(main.isUsefulIntString(0.123)).toBe(false)
    expect(main.isUsefulIntString(0)).toBe(false)
    expect(main.isUsefulIntString('123')).toBe(true)
    expect(main.isUsefulIntString('123.0')).toBe(false)
    expect(main.isUsefulIntString('')).toBe(false)
    expect(main.isUsefulIntString(new Number(123))).toBe(false)
    expect(main.isUsefulIntString(Infinity)).toBe(false)
    expect(main.isUsefulIntString(-Infinity)).toBe(false)
    expect(main.isUsefulIntString(NaN)).toBe(false)
    expect(main.isUsefulIntString(null)).toBe(false)
    expect(main.isUsefulIntString(undefined)).toBe(false)
    expect(main.isUsefulIntString(true)).toBe(false)
    expect(main.isUsefulIntString(false)).toBe(false)
    expect(main.isUsefulIntString((): void => undefined)).toBe(false)
    expect(main.isUsefulIntString(/asdf/)).toBe(false)
  })

  test('useless', () => {
    expect(main.isUselessIntString(123)).not.toBe(false)
    expect(main.isUselessIntString(123.0)).not.toBe(false)
    expect(main.isUselessIntString(0.123)).not.toBe(false)
    expect(main.isUselessIntString(0)).not.toBe(false)
    expect(main.isUselessIntString('123')).not.toBe(true)
    expect(main.isUselessIntString('123.0')).not.toBe(false)
    expect(main.isUselessIntString('')).not.toBe(false)
    expect(main.isUselessIntString(new Number(123))).not.toBe(false)
    expect(main.isUselessIntString(Infinity)).not.toBe(false)
    expect(main.isUselessIntString(-Infinity)).not.toBe(false)
    expect(main.isUselessIntString(NaN)).not.toBe(false)
    expect(main.isUselessIntString(null)).not.toBe(false)
    expect(main.isUselessIntString(undefined)).not.toBe(false)
    expect(main.isUselessIntString(true)).not.toBe(false)
    expect(main.isUselessIntString(false)).not.toBe(false)
    expect(main.isUselessIntString((): void => undefined)).not.toBe(false)
    expect(main.isUselessIntString(/asdf/)).not.toBe(false)
  })
})

test('isNil', () => {
  expect(main.isNil(123)).toBe(false)
  expect(main.isNil(123.0)).toBe(false)
  expect(main.isNil(0.123)).toBe(false)
  expect(main.isNil(0)).toBe(false)
  expect(main.isNil('123')).toBe(false)
  expect(main.isNil('123.0')).toBe(false)
  expect(main.isNil('')).toBe(false)
  expect(main.isNil(new Number(123))).toBe(false)
  expect(main.isNil(Infinity)).toBe(false)
  expect(main.isNil(-Infinity)).toBe(false)
  expect(main.isNil(NaN)).toBe(false)
  expect(main.isNil(null)).toBe(true)
  expect(main.isNil(undefined)).toBe(true)
  expect(main.isNil(true)).toBe(false)
  expect(main.isNil(false)).toBe(false)
  expect(main.isNil((): void => undefined)).toBe(false)
  expect(main.isNil(/asdf/)).toBe(false)
})
